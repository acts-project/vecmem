/** VecMem project, part of the ACTS project (R&D line)
 *
 * (c) 2021 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL include(s).
#include <CL/sycl.hpp>

// Local include(s).
#include "../../sycl/src/utils/sycl/device_selector.hpp"
#include "vecmem/containers/array.hpp"
#include "vecmem/containers/const_device_array.hpp"
#include "vecmem/containers/const_device_vector.hpp"
#include "vecmem/containers/device_vector.hpp"
#include "vecmem/containers/static_array.hpp"
#include "vecmem/containers/vector.hpp"
#include "vecmem/memory/atomic.hpp"
#include "vecmem/memory/sycl/device_memory_resource.hpp"
#include "vecmem/memory/sycl/host_memory_resource.hpp"
#include "vecmem/memory/sycl/shared_memory_resource.hpp"
#include "vecmem/utils/sycl/copy.hpp"

// GoogleTest include(s).
#include <gtest/gtest.h>

/// Test fixture for the on-device vecmem container tests
class sycl_containers_test : public testing::Test {};

/// Test a linear transformation using the shared memory resource
TEST_F(sycl_containers_test, shared_memory) {

    // Create the SYCL queue that we'll be using in the test.
    cl::sycl::queue queue{vecmem::sycl::device_selector()};

    // The shared memory resource.
    vecmem::sycl::shared_memory_resource resource(&queue);

    // Create an input and an output vector in host (managed) memory.
    vecmem::vector<int> inputvec({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, &resource);
    vecmem::vector<int> outputvec(inputvec.size(), &resource);
    EXPECT_EQ(inputvec.size(), outputvec.size());

    // Create the array that is used in the linear transformation.
    vecmem::array<int, 2> constants(resource);
    constants[0] = 2;
    constants[1] = 3;

    // Perform a linear transformation using the vecmem vector helper types.
    queue.submit([&constants, &inputvec, &outputvec](cl::sycl::handler& h) {
        // Run the kernel.
        h.parallel_for<class LinearTransform1>(
            cl::sycl::range<1>(inputvec.size()),
            [constants = vecmem::get_data(constants),
             input = vecmem::get_data(inputvec),
             output = vecmem::get_data(outputvec)](cl::sycl::id<1> id) {
                // Skip invalid indices.
                const std::size_t i = id[0];
                if (i >= input.size()) {
                    return;
                }

                // Create the helper containers.
                const vecmem::const_device_array<int, 2> constantarray1(
                    constants);
                const vecmem::static_array<int, 2> constantarray2 = {
                    constantarray1[0], constantarray1[1]};
                const vecmem::const_device_vector<int> inputvec(input);
                vecmem::device_vector<int> outputvec(output);

                // Perform the linear transformation.
                outputvec.at(i) = inputvec.at(i) * constantarray1.at(0) +
                                  vecmem::get<1>(constantarray2);
                return;
            });
    });
    queue.wait_and_throw();

    // Check the output.
    EXPECT_EQ(inputvec.size(), outputvec.size());
    for (std::size_t i = 0; i < outputvec.size(); ++i) {
        EXPECT_EQ(outputvec.at(i),
                  inputvec.at(i) * constants[0] + constants[1]);
    }
}

/// Test a linear transformation using the host/device memory resources
TEST_F(sycl_containers_test, device_memory) {

    // Create the SYCL queue that we'll be using in the test.
    cl::sycl::queue queue{vecmem::sycl::device_selector()};

    // The memory resources.
    vecmem::sycl::host_memory_resource host_resource(&queue);
    vecmem::sycl::device_memory_resource device_resource(&queue);

    // Helper object for performing memory copies.
    vecmem::sycl::copy copy(&queue);

    // Create an input and an output vector in host memory.
    vecmem::vector<int> inputvec({1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
                                 &host_resource);
    vecmem::vector<int> outputvec(inputvec.size(), &host_resource);
    EXPECT_EQ(inputvec.size(), outputvec.size());

    // Allocate a device memory block for the output container.
    auto outputvechost = vecmem::get_data(outputvec);
    vecmem::data::vector_buffer<int> outputvecdevice(outputvec.size(),
                                                     device_resource);

    // Create the array that is used in the linear transformation.
    vecmem::array<int, 2> constants(host_resource);
    constants[0] = 2;
    constants[1] = 3;

    // Explicitly copy the input objects to the device. We need to do it outside
    // of the @c sycl::queue::submit call, as the local variables of the lambda
    // given to that function are deleted before the kernel would run.
    auto const_data = copy.to(vecmem::get_data(constants), device_resource);
    auto input_data = copy.to(vecmem::get_data(inputvec), device_resource);

    // Perform a linear transformation using the vecmem vector helper types.
    queue.submit([&const_data, &input_data,
                  &outputvecdevice](cl::sycl::handler& h) {
        // Run the kernel.
        h.parallel_for<class LinearTransform2>(
            cl::sycl::range<1>(input_data.size()),
            [constants = vecmem::get_data(const_data),
             input = vecmem::get_data(input_data),
             output = vecmem::get_data(outputvecdevice)](cl::sycl::id<1> id) {
                // Skip invalid indices.
                const std::size_t i = id[0];
                if (i >= input.size()) {
                    return;
                }

                // Create the helper containers.
                const vecmem::const_device_array<int, 2> constantarray(
                    constants);
                const vecmem::const_device_vector<int> inputvec(input);
                vecmem::device_vector<int> outputvec(output);

                // Perform the linear transformation.
                outputvec.at(i) =
                    inputvec.at(i) * constantarray.at(0) + constantarray.at(1);
                return;
            });
    });
    queue.wait_and_throw();
    copy(outputvecdevice, outputvechost);

    // Check the output.
    EXPECT_EQ(inputvec.size(), outputvec.size());
    for (std::size_t i = 0; i < outputvec.size(); ++i) {
        EXPECT_EQ(outputvec.at(i),
                  inputvec.at(i) * constants[0] + constants[1]);
    }
}

/// Test atomic access in a simple kernel
TEST_F(sycl_containers_test, atomic_memory) {

    // Create the SYCL queue that we'll be using in the test.
    cl::sycl::queue queue{vecmem::sycl::device_selector()};

    // The memory resources.
    vecmem::sycl::shared_memory_resource resource(&queue);

    // Allocate memory on it that would be modified atomically.
    vecmem::vector<int> buffer(100, 0, &resource);

    // Number of iterations performed on a single buffer element.
    static constexpr int ITERATIONS = 100;

    // Do very basic atomic modifications on the buffer.
    queue.submit([&buffer](cl::sycl::handler& h) {
        h.parallel_for<class AtomicTests>(
            cl::sycl::range<1>(buffer.size() * ITERATIONS),
            [buffer = vecmem::get_data(buffer)](cl::sycl::item<1> id) {
                // Check if anything needs to be done.
                const std::size_t i = id[0];
                if (i >= buffer.size() * ITERATIONS) {
                    return;
                }

                // Index/pointer to modify.
                const std::size_t index = i % buffer.size();
                int* ptr = buffer.ptr() + index;

                // Do some simple stuff with it.
                vecmem::atomic<int> a(ptr);
                a.fetch_add(4);
                a.fetch_sub(2);
                a.fetch_and(0xffffffff);
                a.fetch_or(0x00000000);
            });
    });
    queue.wait_and_throw();

    // Check the output.
    for (int value : buffer) {
        EXPECT_EQ(value, ITERATIONS * 2);
    }
}

/// Test the usage of extendable vectors in a kernel
TEST_F(sycl_containers_test, extendable_memory) {

    // Create the SYCL queue that we'll be using in the test.
    cl::sycl::queue queue{vecmem::sycl::device_selector()};

    // The memory resources.
    vecmem::sycl::host_memory_resource host_resource(&queue);
    vecmem::sycl::device_memory_resource device_resource(&queue);
    vecmem::sycl::shared_memory_resource shared_resource(&queue);

    // Helper object for performing memory copies.
    vecmem::sycl::copy copy(&queue);

    // Create a small (input) vector in shared memory.
    vecmem::vector<int> input(&shared_resource);
    for (int i = 0; i < 100; ++i) {
        input.push_back(i);
    }

    // Create a buffer that will hold the filtered elements of the input vector.
    vecmem::data::vector_buffer<int> output_buffer(input.size(), 0,
                                                   device_resource);
    copy.setup(output_buffer);

    // Run a kernel that filters the elements of the input vector.
    queue.submit([&input, &output_buffer](cl::sycl::handler& h) {
        h.parallel_for<class FilterTests>(
            cl::sycl::range<1>(input.size()),
            [input = vecmem::get_data(input),
             output = vecmem::get_data(output_buffer)](cl::sycl::item<1> id) {
                // Check if anything needs to be done.
                const std::size_t i = id[0];
                if (i >= input.size()) {
                    return;
                }

                // Set up the vector objects.
                const vecmem::const_device_vector<int> inputvec(input);
                vecmem::device_vector<int> outputvec(output);

                // Add this thread's element, if it passes the selection.
                const int element = inputvec.at(i);
                if (element > 10) {
                    outputvec.push_back(element);
                }
            });
    });
    queue.wait_and_throw();

    // Copy the output into the host's memory.
    vecmem::vector<int> output(&host_resource);
    copy(output_buffer, output);

    // Check its contents.
    EXPECT_EQ(output.size(), static_cast<vecmem::vector<int>::size_type>(89));
    for (int value : output) {
        EXPECT_LT(10, value);
    }
}

/// Test the usage of an @c array<vector<...>> construct
TEST_F(sycl_containers_test, array_memory) {

    // Create the SYCL queue that we'll be using in the test.
    cl::sycl::queue queue{vecmem::sycl::device_selector()};

    // The memory resource(s).
    vecmem::sycl::shared_memory_resource shared_resource(&queue);

    // Create an array of vectors.
    vecmem::static_array<vecmem::vector<int>, 4> vec_array{
        vecmem::vector<int>{{1, 2, 3, 4}, &shared_resource},
        vecmem::vector<int>{{5, 6}, &shared_resource},
        vecmem::vector<int>{{7, 8, 9}, &shared_resource},
        vecmem::vector<int>{&shared_resource}};

    // Create an appropriate data object out of it.
    vecmem::static_array<vecmem::data::vector_view<int>, 4> vec_data{
        vecmem::get_data(vec_array[0]), vecmem::get_data(vec_array[1]),
        vecmem::get_data(vec_array[2]), vecmem::get_data(vec_array[3])};

    // Run a kernel on it that multiplies each element in the array of vectors
    // by 2.
    queue
        .submit([&vec_data](cl::sycl::handler& h) {
            h.parallel_for<class ArrayVecTest>(
                cl::sycl::range<2>(4, 4),
                [data = vec_data](cl::sycl::item<2> id) {
                    // Check if anything needs to be done.
                    if (id[0] >= data.size()) {
                        return;
                    }
                    if (id[1] >= data[id[0]].size()) {
                        return;
                    }

                    // Create the "device type".
                    vecmem::static_array<vecmem::device_vector<int>, 4> vec{
                        data[0], data[1], data[2], data[3]};

                    // Perform the transformation.
                    vec[id[0]][id[1]] *= 2;
                });
        })
        .wait_and_throw();

    // Check its contents.
    EXPECT_EQ(vec_array.at(0).at(0), 2);
    EXPECT_EQ(vec_array.at(0).at(1), 4);
    EXPECT_EQ(vec_array.at(0).at(2), 6);
    EXPECT_EQ(vec_array.at(0).at(3), 8);
    EXPECT_EQ(vec_array.at(1).at(0), 10);
    EXPECT_EQ(vec_array.at(1).at(1), 12);
    EXPECT_EQ(vec_array.at(2).at(0), 14);
    EXPECT_EQ(vec_array.at(2).at(1), 16);
    EXPECT_EQ(vec_array.at(2).at(2), 18);
    EXPECT_EQ(vec_array.at(3).size(), 0u);
}
