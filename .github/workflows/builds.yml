# VecMem project, part of the ACTS project (R&D line)
#
# (c) 2021-2022 CERN for the benefit of the ACTS project
#
# Mozilla Public License Version 2.0

# Name for this "action".
name: Build Tests

# Perform the builds on every push and pull request.
on: [ push, pull_request ]

# All the different build/test jobs.
jobs:

  # Native build jobs.
  native:

    # The different build modes to test.
    strategy:
      matrix:
        BUILD:
          - TYPE: "Release"
            MSG_LVL: 0
          - TYPE: "Debug"
            MSG_LVL: 5
        PLATFORM:
          - OS: "ubuntu-latest"
            GENERATOR: -G "Unix Makefiles"
          - OS: "macos-latest"
            GENERATOR: -G "Xcode"
          - OS: "windows-latest"
            GENERATOR:

    # The system to run on.
    runs-on: ${{ matrix.PLATFORM.OS }}

    # The build/test steps to execute.
    steps:
    # Use a standard checkout of the code.
    - uses: actions/checkout@v2
    # Run the CMake configuration.
    - name: Configure
      run: cmake -DCMAKE_BUILD_TYPE=${{ matrix.BUILD.TYPE }}
                 -DVECMEM_DEBUG_MSG_LVL=${{ matrix.BUILD.MSG_LVL }}
                 -DVECMEM_BUILD_BENCHMARKING=TRUE
                 -S ${{ github.workspace }} -B build
                 ${{ matrix.PLATFORM.GENERATOR }}
    # Print the configuration log for debugging
    - name: Print CMake Configure Output
      run: cat build/CMakeFiles/CMakeOutput.log
    - name: Print CMake Configure Errors
      run: cat build/CMakeFiles/CMakeError.log
    # Perform the build.
    - name: Build
      run: cmake --build build --config ${{ matrix.BUILD.TYPE }}
    # Run the unit test(s).
    - name: Test
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.BUILD.TYPE }}

  # Containerised build jobs.
  container:

    # The different build modes to test.
    strategy:
      matrix:
        BUILD:
          - TYPE: "Release"
            MSG_LVL: 0
          - TYPE: "Debug"
            MSG_LVL: 5
        PLATFORM:
          - NAME: "CUDA"
            CONTAINER: "ghcr.io/acts-project/ubuntu1804_cuda:v11"
            OPTIONS:
          - NAME: "CUDA"
            CONTAINER: "ghcr.io/acts-project/ubuntu2004_cuda:v32"
            OPTIONS:
          - NAME: "HIP"
            CONTAINER: "ghcr.io/acts-project/ubuntu1804_rocm:v11"
            OPTIONS:
          - NAME: "SYCL"
            CONTAINER: "ghcr.io/acts-project/ubuntu2004_oneapi:v20"
            OPTIONS:
          - NAME: "SYCL"
            CONTAINER: "ghcr.io/acts-project/ubuntu1804_cuda_oneapi:v32"
            OPTIONS: -DVECMEM_BUILD_CUDA_LIBRARY=FALSE
        include:
          - BUILD:
              TYPE: "Release"
              MSG_LVL: 0
            PLATFORM:
              NAME: "SYCL"
              CONTAINER: "ghcr.io/acts-project/ubuntu1804_rocm_oneapi:v32"
              OPTIONS: -DVECMEM_BUILD_HIP_LIBRARY=FALSE

    # The system to run on.
    runs-on: ubuntu-latest
    container: ${{ matrix.PLATFORM.CONTAINER }}

    # Use BASH as the shell from the image.
    defaults:
      run:
        shell: bash

    # The build/test steps to execute.
    steps:
    # Use a standard checkout of the code.
    - uses: actions/checkout@v2
    # Run the CMake configuration.
    - name: Configure
      run: |
        source ${GITHUB_WORKSPACE}/.github/ci_setup.sh ${{ matrix.PLATFORM.NAME }}
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.BUILD.TYPE }} -DVECMEM_DEBUG_MSG_LVL=${{ matrix.BUILD.MSG_LVL }} -DVECMEM_BUILD_${{ matrix.PLATFORM.NAME }}_LIBRARY=TRUE -DVECMEM_BUILD_BENCHMARKING=TRUE ${{ matrix.PLATFORM.OPTIONS }} -S ${GITHUB_WORKSPACE} -B build
    # Print the configuration log for debugging
    - name: Print CMake Configure Output
      run: cat build/CMakeFiles/CMakeOutput.log
    - name: Print CMake Configure Errors
      run: cat build/CMakeFiles/CMakeError.log
    # Perform the build.
    - name: Build
      run: |
        source ${GITHUB_WORKSPACE}/.github/ci_setup.sh ${{ matrix.PLATFORM.NAME }}
        cmake --build build
    # Run the unit test(s).
    - name: Test
      if: "matrix.PLATFORM.NAME == 'SYCL'"
      run: |
        cd build
        source ${GITHUB_WORKSPACE}/.github/ci_setup.sh ${{ matrix.PLATFORM.NAME }}
        ctest --output-on-failure
