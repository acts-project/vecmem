/*
 * VecMem project, part of the ACTS project (R&D line)
 *
 * (c) 2021 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL include(s).
#include <CL/sycl.hpp>

// VecMem include(s).
#include "get_queue.hpp"
#include "vecmem/utils/debug.hpp"
#include "vecmem/utils/sycl/copy.hpp"

// System include(s).
#include <vector>

namespace vecmem::sycl {

copy::copy(const queue_wrapper& queue) : m_queue(queue) {}

void copy::do_copy(std::size_t size, const void* from_ptr, void* to_ptr,
                   type::copy_type) {

    // Check if anything needs to be done.
    if (size == 0) {
        VECMEM_DEBUG_MSG(5, "Skipping unnecessary memory copy");
        return;
    }

    // Some sanity checks.
    assert(from_ptr != nullptr);
    assert(to_ptr != nullptr);

    // Perform the copy.
    auto event = details::get_queue(m_queue).memcpy(to_ptr, from_ptr, size);
    event.wait_and_throw();

    // Let the user know what happened.
    VECMEM_DEBUG_MSG(4, "Performed memory copy of %lu bytes from %p to %p",
                     size, from_ptr, to_ptr);
}

void copy::do_memset(std::size_t size, void* ptr, int value) {

    // Check if anything needs to be done.
    if (size == 0) {
        VECMEM_DEBUG_MSG(5, "Skipping unnecessary memory filling");
        return;
    }

    // Some sanity checks.
    assert(ptr != nullptr);

    // Perform the operation.
#if defined(VECMEM_HAVE_SYCL_MEMSET)
    auto event = details::get_queue(m_queue).memset(ptr, value, size);
#else
    const std::vector<int> dummy(size / sizeof(int) + 1, value);
    auto event = details::get_queue(m_queue).memcpy(ptr, dummy.data(), size);
#endif  // VECMEM_HAVE_SYCL_MEMSET
    event.wait_and_throw();

    // Let the user know what happened.
    VECMEM_DEBUG_MSG(4, "Set %lu bytes to %i at %p with SYCL", size, value,
                     ptr);
}

}  // namespace vecmem::sycl
